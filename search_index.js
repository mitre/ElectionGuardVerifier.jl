var documenterSearchIndex = {"docs":
[{"location":"results.html#Results","page":"Results","title":"Results","text":"","category":"section"},{"location":"results.html","page":"Results","title":"Results","text":"The check function implements what is described in the version 1.0 ElectionGuard Specification. To understand the output of the MITRE ElectionGuard Verifier, please turn to Section 6.2 titled \"Verifier Steps\".  The numbers in the output correspond to the steps listed in this section.  For example, the line of output that says:","category":"page"},{"location":"results.html","page":"Results","title":"Results","text":"1. Standard parameters were found.","category":"page"},{"location":"results.html","page":"Results","title":"Results","text":"is the result of performing the test described in Step 1.","category":"page"},{"location":"results.html","page":"Results","title":"Results","text":"The verifier implements all verification steps with the follow exceptions:","category":"page"},{"location":"results.html","page":"Results","title":"Results","text":"Step 6 on the validation of ballot chaining is not implemented. The manifest, also known as the ballot coding file, does not say how to hash individual ballots.\nStep 5 includes an addition check that ensures that there are no duplicate submitted ballots.\nThe spec incorrectly specifies hashes computed in six steps.\nIn Step 2A, c_ij = H(Q K_ijh_ij)mod q should be c_ij=H(K_ijh_ij)mod q.\nIn Step 3B, bar Q = H(Q K) should be bar Q = H(K C), where C is the commitment hash.\nIn Step 4B, c = H(bar Q(alphabeta)(a_0b_0)(a_1b_1)) should be c = H(bar Qalphabetaa_0b_0 a_1b_1).\nIn Step 5E, C = H(bar Q(AB)(ab)) should be C = H(bar QABab).\nIn Step 8C, c_i = H(bar Q(AB)(a_ib_i) M_i) should be c_i = H(bar QABa_ib_i M_i).\nIn Step 9C, c_iell = H(bar Q(AB)(a_iellb_iell) M_iell) should be c_iell = H(bar QABa_iellb_iell M_iell).","category":"page"},{"location":"usage.html#Usage","page":"Usage","title":"Usage","text":"","category":"section"},{"location":"usage.html","page":"Usage","title":"Usage","text":"To run the verifier, change your directory to the location of the election records.  It's the directory that contains a manifest.json file.","category":"page"},{"location":"usage.html","page":"Usage","title":"Usage","text":"Start the Julia interpreter with\n$ julia\nLoad the verifier with\njulia> using ElectionGuardVerifier\nLoad the election records with\njulia> er = load(\".\");\nCheck the election records with\njulia> check(er)\nThe final line of output is true if the election records pass all tests, otherwise it is false.\nExit Julia with exit() or type cntl-D.","category":"page"},{"location":"development.html#Development","page":"Development","title":"Development","text":"","category":"section"},{"location":"development.html","page":"Development","title":"Development","text":"CurrentModule = ElectionGuardVerifier","category":"page"},{"location":"development.html","page":"Development","title":"Development","text":"This section introduces the source code that makes up the verifier.","category":"page"},{"location":"development.html#Datatypes","page":"Development","title":"Datatypes","text":"","category":"section"},{"location":"development.html","page":"Development","title":"Development","text":"The way to understand the software is to start by viewing the Datatypes module.","category":"page"},{"location":"development.html","page":"Development","title":"Development","text":"Datatypes","category":"page"},{"location":"development.html#ElectionGuardVerifier.Datatypes","page":"Development","title":"ElectionGuardVerifier.Datatypes","text":"Datatypes\n\nDatatypes contains structs that reflect the contents of JSON files that make up election records.\n\n\n\n\n\n","category":"module"},{"location":"development.html#Loader","page":"Development","title":"Loader","text":"","category":"section"},{"location":"development.html","page":"Development","title":"Development","text":"The loader describes the expected directory structure of an election record.","category":"page"},{"location":"development.html","page":"Development","title":"Development","text":"load(path::AbstractString)","category":"page"},{"location":"development.html#ElectionGuardVerifier.Loader.load-Tuple{AbstractString}","page":"Development","title":"ElectionGuardVerifier.Loader.load","text":"load(path::AbstractString)::Election_record\n\nLoad election records in the given directory.\n\n\n\n\n\n","category":"method"},{"location":"development.html#Utililies","page":"Development","title":"Utililies","text":"","category":"section"},{"location":"development.html","page":"Development","title":"Development","text":"CurrentModule = ElectionGuardVerifier.Utils","category":"page"},{"location":"development.html","page":"Development","title":"Development","text":"Utils\nmulpowmod(a::BigInt, x::BigInt, b::BigInt, p::BigInt)\nsame(c1::Constants, c2::Constants)\nsame(c1::Ciphertext, c2::Ciphertext)\nwithin(x::BigInt, p::BigInt)\nwithin_mod\none_ct\nprod_ct(x1::Ciphertext, x2::Ciphertext, p::BigInt)","category":"page"},{"location":"development.html#ElectionGuardVerifier.Utils","page":"Development","title":"ElectionGuardVerifier.Utils","text":"Utils\n\nFunctions used to implement Election Guard checks.\n\n\n\n\n\n","category":"module"},{"location":"development.html#ElectionGuardVerifier.Utils.mulpowmod-NTuple{4, BigInt}","page":"Development","title":"ElectionGuardVerifier.Utils.mulpowmod","text":"mulpowermod(a, x, b, p) = (a * x ^ b) mod p\n\n\n\n\n\n","category":"method"},{"location":"development.html#ElectionGuardVerifier.Utils.same-Tuple{ElectionGuardVerifier.Datatypes.Constants, ElectionGuardVerifier.Datatypes.Constants}","page":"Development","title":"ElectionGuardVerifier.Utils.same","text":"same(c1::Constants, c2::Constants)::Bool\n\nAre two sets of constants the same?\n\n\n\n\n\n","category":"method"},{"location":"development.html#ElectionGuardVerifier.Utils.same-Tuple{ElectionGuardVerifier.Datatypes.Ciphertext, ElectionGuardVerifier.Datatypes.Ciphertext}","page":"Development","title":"ElectionGuardVerifier.Utils.same","text":"same(c1::Ciphertext, c2::Ciphertext)::Bool\n\nAre two ciphertexts the same?\n\n\n\n\n\n","category":"method"},{"location":"development.html#ElectionGuardVerifier.Utils.within-Tuple{BigInt, BigInt}","page":"Development","title":"ElectionGuardVerifier.Utils.within","text":"within(x::BigInt, p::BigInt)::Bool\n\nIs 0 ≤ x < p?\n\n\n\n\n\n","category":"method"},{"location":"development.html#ElectionGuardVerifier.Utils.within_mod","page":"Development","title":"ElectionGuardVerifier.Utils.within_mod","text":"within_mod(x::BigInt, q::BigInt, p::BigInt)::Bool\n\nIs 0 ≤ x < p and (x ^ q) mod p == 1?\n\n\n\n\n\n","category":"function"},{"location":"development.html#ElectionGuardVerifier.Utils.one_ct","page":"Development","title":"ElectionGuardVerifier.Utils.one_ct","text":"one_ct::Ciphertext\n\none_ct = Ciphertext(1, 1)\n\n\n\n\n\n","category":"constant"},{"location":"development.html#ElectionGuardVerifier.Utils.prod_ct-Tuple{ElectionGuardVerifier.Datatypes.Ciphertext, ElectionGuardVerifier.Datatypes.Ciphertext, BigInt}","page":"Development","title":"ElectionGuardVerifier.Utils.prod_ct","text":"prod_ct(x1::Ciphertext, x2::Ciphertext, p::BigInt)::Ciphertext\n\nMultiply two ciphertexts mod p\n\n\n\n\n\n","category":"method"},{"location":"development.html#Check","page":"Development","title":"Check","text":"","category":"section"},{"location":"development.html","page":"Development","title":"Development","text":"CurrentModule = ElectionGuardVerifier","category":"page"},{"location":"development.html","page":"Development","title":"Development","text":"The check function implements what is described in the version 1.0 ElectionGuard Specification.","category":"page"},{"location":"development.html","page":"Development","title":"Development","text":"check(er::Election_record)","category":"page"},{"location":"development.html#ElectionGuardVerifier.check-Tuple{ElectionGuardVerifier.Datatypes.Election_record}","page":"Development","title":"ElectionGuardVerifier.check","text":"check(er::Election_record)::Bool\n\nCheck election records.  Return true if all checks pass.\n\n\n\n\n\n","category":"method"},{"location":"development.html#Errata","page":"Development","title":"Errata","text":"","category":"section"},{"location":"development.html","page":"Development","title":"Development","text":"The places at which the code is at odds with what is in the spec can be found by searching for the follow comment in the Julia source code:","category":"page"},{"location":"development.html","page":"Development","title":"Development","text":"#! Spec conflict","category":"page"},{"location":"installation.html#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"installation.html","page":"Installation","title":"Installation","text":"MITRE ElectionGuard Verifier can be installed using the Julia package manager. From the Julia REPL, type ] to enter the Pkg REPL mode and run","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"pkg> add ElectionGuardVerifier","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"Type the delete key or cntl-C to exit the Pkg REPL mode.","category":"page"},{"location":"index.html#MITRE-ElectionGuard-Verifier","page":"Home","title":"MITRE ElectionGuard Verifier","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"ElectionGuard is a software system designed to make voting more secure, transparent and accessible. ElectionGuard uses cryptography to ensure that","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"voters can verify that their own selections have been correctly recorded, and\nanyone can verify that the recorded votes have been correctly tallied.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"The MITRE ElectionGuard Verifier provides the means to validate specification version 1.0 ElectionGuard election records that use version 0.95 data formats in an easy to use package.  This is a preview release, and the verifier will be updated sometime after version 1.0 sample data becomes available here.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"The MITRE ElectionGuard Verifier is written in the Julia programming language.  Follow the instructions at the Julia web site to download and install the system on your computer.","category":"page"}]
}
